# 커서룰 - Mood Diary 프로젝트

## 프로젝트 개요
- **프레임워크**: Next.js 14 (App Router)
- **언어**: TypeScript
- **스타일링**: Tailwind CSS + CSS Modules
- **상태관리**: React Query (@tanstack/react-query)
- **테마**: next-themes
- **테스팅**: Vitest, Playwright, Storybook
- **언어**: 한국어 (코드 주석 및 문서)

## 코딩 스타일 가이드

### 1. 파일 구조 및 네이밍
```
src/
├── app/                    # Next.js App Router 페이지
├── components/             # 페이지별 컴포넌트
│   ├── diaries/           # 일기 관련 컴포넌트
│   ├── diaries-detail/    # 일기 상세 컴포넌트
│   └── diaries-new/       # 일기 작성 컴포넌트
├── commons/               # 공통 컴포넌트 및 유틸리티
│   ├── components/        # 재사용 가능한 UI 컴포넌트
│   ├── constants/         # 상수 정의
│   ├── layout/           # 레이아웃 관련
│   └── providers/        # Context Provider들
└── public/               # 정적 자산
```

### 2. 파일 네이밍 규칙
- **컴포넌트**: PascalCase (예: `Layout.tsx`, `DiaryCard.tsx`)
- **훅**: camelCase + `.hook.ts` (예: `useLinkRouting.hook.ts`)
- **상수**: camelCase + `.ts` (예: `url.ts`)
- **스타일**: camelCase + `.module.css` (예: `styles.module.css`)
- **테스트**: `.spec.ts` 또는 `.test.ts`
- **스토리북**: `.stories.tsx`

### 3. TypeScript 규칙
- **엄격한 타입 체크**: `strict: true` 사용
- **인터페이스**: PascalCase로 시작 (예: `LayoutProps`, `URLConfig`)
- **타입**: PascalCase로 시작 (예: `AccessType`, `LayoutVisibility`)
- **제네릭**: 단일 대문자 (예: `T`, `K`, `V`)
- **유니온 타입**: 리터럴 타입 사용 (예: `'public' | 'member-only'`)

### 4. React 컴포넌트 규칙
```tsx
// 1. 'use client' 지시어는 필요한 경우에만 사용
'use client';

// 2. Props 인터페이스 정의
export interface ComponentProps {
  /**
   * 컴포넌트 설명
   */
  children: React.ReactNode;
  className?: string;
}

// 3. JSDoc 주석으로 컴포넌트 설명
/**
 * Component 컴포넌트
 * 
 * 컴포넌트의 역할과 기능을 설명합니다.
 * 
 * @param {ComponentProps} props - 컴포넌트 props
 * @param {React.ReactNode} props.children - 자식 요소
 * @param {string} [props.className] - 추가 CSS 클래스
 * 
 * @example
 * ```tsx
 * <Component className="custom-class">
 *   <div>내용</div>
 * </Component>
 * ```
 */
const Component: React.FC<ComponentProps> = ({ children, className }) => {
  // 4. 훅 사용
  const { data, isLoading } = useQuery();
  
  // 5. 이벤트 핸들러
  const handleClick = () => {
    // 로직
  };
  
  // 6. 조건부 렌더링
  if (isLoading) {
    return <div>로딩 중...</div>;
  }
  
  // 7. JSX 반환
  return (
    <div className={className}>
      {children}
    </div>
  );
};

export default Component;
```

### 5. 스타일링 규칙
- **Tailwind CSS**: 유틸리티 클래스 우선 사용
- **CSS Modules**: 복잡한 스타일링이나 컴포넌트별 스타일
- **색상**: `tailwind.config.ts`에 정의된 디자인 시스템 사용
  - Primary: `blue-*` 계열
  - Neutral: `gray-*` 계열
  - Error: `red-*` 계열
  - Success: `green-*` 계열
  - Warning: `yellow-*` 계열

### 6. 상태 관리 규칙
- **React Query**: 서버 상태 관리
- **useState**: 로컬 컴포넌트 상태
- **useContext**: 전역 상태 (테마, 모달 등)
- **커스텀 훅**: 복잡한 로직 분리

### 7. 라우팅 및 URL 관리
- **URL 상수**: `src/commons/constants/url.ts`에서 중앙 관리
- **다이나믹 라우팅**: `[id]` 패턴 사용
- **네비게이션**: `useRouter` 훅 사용
- **URL 유틸리티**: `urlUtils` 객체 활용

### 8. 테스팅 규칙
- **단위 테스트**: Vitest 사용
- **E2E 테스트**: Playwright 사용
- **컴포넌트 테스트**: Storybook + Vitest
- **테스트 파일**: `.spec.ts` 또는 `.test.ts` 확장자
- **테스트 ID**: `data-testid` 속성 사용

### 9. 접근성 (A11y) 규칙
- **시맨틱 HTML**: 적절한 HTML 태그 사용
- **ARIA 속성**: 필요시 `aria-*` 속성 추가
- **키보드 네비게이션**: `tabIndex`, `onKeyDown` 지원
- **스크린 리더**: `alt` 텍스트, `aria-label` 제공

### 10. 성능 최적화 규칙
- **이미지**: Next.js `Image` 컴포넌트 사용
- **코드 분할**: 동적 import 사용
- **메모이제이션**: `React.memo`, `useMemo`, `useCallback` 적절히 사용
- **번들 크기**: 불필요한 라이브러리 import 방지

### 11. 에러 처리 규칙
- **Error Boundary**: React Error Boundary 구현
- **Try-Catch**: 비동기 작업에서 에러 처리
- **사용자 피드백**: 에러 상황에 대한 적절한 UI 제공
- **로깅**: 개발 환경에서 에러 로깅

### 12. 보안 규칙
- **XSS 방지**: 사용자 입력 sanitization
- **CSRF 방지**: 적절한 토큰 사용
- **환경 변수**: 민감한 정보는 `.env.local`에 저장
- **타입 검증**: 런타임 타입 검증 (zod 등)

### 13. 문서화 규칙
- **JSDoc**: 모든 public 함수와 컴포넌트에 주석
- **README**: 프로젝트 설정 및 실행 방법
- **Storybook**: 컴포넌트 문서화
- **타입 정의**: 명확한 타입 정의로 자체 문서화

### 14. Git 규칙
- **커밋 메시지**: 한국어로 명확하게 작성
- **브랜치**: feature/, bugfix/, hotfix/ 접두사 사용
- **PR**: 코드 리뷰 필수
- **커밋 단위**: 논리적 단위로 분리

### 15. 개발 환경 규칙
- **ESLint**: 코드 품질 유지
- **Prettier**: 코드 포맷팅 통일
- **Husky**: 커밋 전 자동 검사
- **TypeScript**: 엄격한 타입 체크

## 특별 규칙

### 1. 한국어 우선
- 모든 주석, 문서, 커밋 메시지는 한국어로 작성
- 변수명, 함수명은 영어 사용
- 사용자에게 보이는 텍스트는 한국어

### 2. 다이어리 앱 특화 규칙
- **감정 표현**: 일관된 감정 아이콘 및 색상 사용
- **날짜 처리**: 한국 날짜 형식 우선
- **이미지 처리**: 반응형 이미지 최적화
- **프라이버시**: 개인 정보 보호 고려

### 3. 레이아웃 시스템
- **URL 기반 레이아웃**: `url.ts`의 `LayoutVisibility` 설정 활용
- **조건부 렌더링**: `useAreaVisibility` 훅 사용
- **반응형**: 모바일 우선 설계

이 커서룰을 따라 일관성 있고 유지보수 가능한 코드를 작성하세요.
